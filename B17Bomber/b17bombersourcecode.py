Uploaded File: C:\Users\victim\Downloads\RarSFX0 - Kopya\B17 BOMBER.exe

PycodeObject Size: 5576
Python Version: 2
InstallPath: C:\Python27\
---------------------------------
Decompiling: C:\Users\victim\AppData\Local\Temp\0.pyc
---------------------------------
# uncompyle6 version 2.9.10
# Python bytecode 2.7 (62211)
# Decompiled from: Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC v.1500 32 bit (Intel)]
# Embedded file name: B:\Portable Python 2.7.6.1\App\lib\site-packages\py2exe\boot_common.py
# Compiled at: 2024-12-15 23:19:54
import sys
if sys.frozen == 'windows_exe':

    class Stderr(object):
        softspace = 0
        _file = None
        _error = None

        def write(self, text, alert=sys._MessageBox, fname=sys.executable + '.log'):
            if self._file is None and self._error is None:
                try:
                    self._file = open(fname, 'a')
                except Exception as details:
                    self._error = details
                    import atexit
                    atexit.register(alert, 0, "The logfile '%s' could not be opened:\n %s" % (
                     fname, details), 'Errors occurred')
                else:
                    import atexit
                    atexit.register(alert, 0, "See the logfile '%s' for details" % fname, 'Errors occurred')

            if self._file is not None:
                self._file.write(text)
                self._file.flush()
            return

        def flush(self):
            if self._file is not None:
                self._file.flush()
            return


    sys.stderr = Stderr()
    del sys._MessageBox
    del Stderr

    class Blackhole(object):
        softspace = 0

        def write(self, text):
            pass

        def flush(self):
            pass


    sys.stdout = Blackhole()
    del Blackhole
del sys
import linecache

def fake_getline(filename, lineno, module_globals=None):
    return ''


linecache.orig_getline = linecache.getline
linecache.getline = fake_getline
del linecache
del fake_getline
# okay decompiling C:\Users\victim\AppData\Local\Temp\0.pyc

---------------------------------
Decompiling: C:\Users\victim\AppData\Local\Temp\1.pyc
---------------------------------
# uncompyle6 version 2.9.10
# Python bytecode 2.7 (62211)
# Decompiled from: Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC v.1500 32 bit (Intel)]
# Embedded file name: <install zipextimporter>
# Compiled at: 2024-12-15 23:19:54
import zipextimporter
zipextimporter.install()
# okay decompiling C:\Users\victim\AppData\Local\Temp\1.pyc

---------------------------------
Decompiling: C:\Users\victim\AppData\Local\Temp\2.pyc
---------------------------------
# uncompyle6 version 2.9.10
# Python bytecode 2.7 (62211)
# Decompiled from: Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC v.1500 32 bit (Intel)]
# Embedded file name: test.py
# Compiled at: 2024-12-15 23:19:54
from PyQt4 import QtCore, QtGui
import io
import winsound
import threading
try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:

    def _fromUtf8(s):
        return s


try:
    _encoding = QtGui.QApplication.UnicodeUTF8

    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)


except AttributeError:

    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)


class Ui_Dialog(object):

    def setupUi(self, Dialog):
        Dialog.setObjectName(_fromUtf8('Dialog'))
        Dialog.resize(481, 300)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setMinimumSize(QtCore.QSize(481, 300))
        Dialog.setMaximumSize(QtCore.QSize(482, 301))
        icon = QtGui.QIcon.fromTheme(_fromUtf8('qicon'))
        Dialog.setWindowIcon(icon)
        Dialog.setAutoFillBackground(False)
        Dialog.setStyleSheet(_fromUtf8(''))
        self.label = QtGui.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(0, 0, 481, 300))
        self.label.setStyleSheet(_fromUtf8(''))
        self.label.setText(_fromUtf8(''))
        self.label.setPixmap(QtGui.QPixmap('B17.png'))
        self.label.setScaledContents(True)
        self.label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.label.setObjectName(_fromUtf8('label'))
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        Dialog.setWindowTitle(_translate('Dialog', 'B17 BOMBER', None))
        return


class MyThread(threading.Thread):

    def run(self):
        winsound.PlaySound('b17b.wav', winsound.SND_FILENAME)


if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    Dialog = QtGui.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    thread = MyThread()
    thread.start()
    sys.exit(app.exec_())
# okay decompiling C:\Users\victim\AppData\Local\Temp\2.pyc